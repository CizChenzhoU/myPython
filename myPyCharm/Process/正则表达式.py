# 字符串是编程时涉及到的最多的一种数据结构，对字符串进程操作的需求几乎无处不在。比如判断一个字符串
# 是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样不但麻烦，
# 而且代码难以复用

# 正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规
# 则，服饰符合规则的字符串，我们就任务它“匹配”了，否则，该字符串就是不合法的。
# 所以我们判断一个字符串是否是合法的Email的方法是
# 1.创建一个匹配的Email的正则表达式；
# 2.用该正则表达式去匹配用户的输入来判断是否合法。
# 因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符串来描述字符。
# 在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以
# '00\d'可以匹配'007'，但无法匹配'00A'；
# '\w\w\d'可以匹配'py3'；

# .可以匹配任意字符，要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个）
# 用+表示至少一个字符，用？表示0个或1个字符，用｛n｝表示n个字符，用｛n,m｝表示n-m
# 个字符
# ^表示行的开头，^\d表示必须以数字开头。
#
# $表示行的结束，\d$表示必须以数字结束。

# re模块
# 有了准备知识，我们就可以在Python中使用正则表达式了。Python提供re模块，包含所有正则表达式的功能。
# 由于Python的字符串本身也用\转义，所以要特别注意：
# s = 'ABC\\-001' # Python的字符串
# # 对应的正则表达式字符串变成：
# # 'ABC\-001'
# 因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：
# s = r'ABC\-001' # Python的字符串
# # 对应的正则表达式字符串不变：
# # 'ABC\-001'

# import re
#
# if re.match(r'^\d{3}\-\d{3,8}$', '010-12345'):
#     print('OK')
# else:
#     print('failed')

# 切换字符串
# 用正则表达式切分字符串比用固定的字符更灵活
# 正常切分
# import re
# print('a b  c'.split(' '))
# # 无法识别连续的空格，用正则试试
# print(re.split(r'\s+', 'a b  c'))
# # 无论多少个空格都可以正常分割。加入，试试
# print(re.split(r'\s+', 'a,b,c d'))
# 分组
# 除了简单地判断是否匹配之外，正则表达式还有提取字符串的强大功能。
# 用（）表示的就是要提取的分组（Group）。比如：
# ^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：
# import re
# m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
# print(m.group(0))
# print(m.group(1))
# print(m.group(2))
# # 如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来
# # 注意到group(0)永远是原始字符串，group(1),group(2)表示第1、第2个子串
# t = '19:05:30'
# m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
# print(m.groups())

# 贪婪匹配
# 最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
# 例如L匹配出数字后面的0
# import re
# print(re.match(r'^(\d+)(0*)$','102300').groups())
# # 由于\d采用了贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了
# # 必须让\d采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来。加个？就可以让\d+采用非贪婪匹配
# print(re.match(r'^(\d+?)(0*)$','102300').groups())

# 编译
# 当我们在Python中使用正则表达式时，re模块内部会干两件事：
# 1.编译正则表达式，如果正则表达是的字符串本身不合法，会报错
# 2.用编译后的正则表达式去匹配字符串。

# 预编译
# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用就不需要
# 编译这个步骤，直接匹配

# import re
# # 编译
# re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# # 使用
# print(re_telephone.match('010-12345').groups())
# print(re_telephone.match('010-8086').groups())

# 练习
#
# 请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：
#
# someone@gmail.com
# bill.gates@microsoft.com
# 版本二可以验证并提取出带名字的Email地址：
#
# <Tom Paris> tom@voyager.org
import re
re_Email=re.compile(r'^\w+.?\w+@\w+.com')
re_email = re.compile(r'^(<[A-Za-z]+.?[A-Za-z]+>)?.+(\w+\W?\w+)@(\w)+\.(\w){2,5}$')
print(re_Email.match('someone@gmail.com'))
print(re_Email.match('bill.gates@microsoft.com'))





